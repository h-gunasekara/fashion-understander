import json
import os
from openai import OpenAI
from typing import Dict
from datetime import datetime
from dotenv import load_dotenv
from pathlib import Path

class ShopbopPatternAnalyzer:
    def __init__(self, api_key: str):
        self.client = OpenAI(api_key=api_key)
        self.images_dir = Path("shopbop_images")
        
    def load_json_data(self, file_path: str) -> Dict:
        """Load Shopbop JSON data file."""
        with open(file_path, 'r') as f:
            data = json.load(f)
            return data

    def analyze_patterns(self, data: Dict) -> str:
        """Analyze common style combinations and patterns in the sweater/knit data."""
        prompt = f"""
        As a senior knitwear merchandising analyst, analyze these Shopbop sweater listings to identify 
        the most common and successful style combinations. Focus ONLY on combinations that appear 
        multiple times in the data - do not include one-off combinations.

        Important: 
        - Only describe patterns that are clearly visible in multiple product images
        - Do not hallucinate or invent combinations
        - Include actual images for each pattern identified "![Product Name](image_url)"
        - Minimum frequency of 3 appearances for a valid pattern

        Focus Areas:

        1. Style Combinations
           - Only include combinations that appear frequently in the data
           - Must provide specific image examples for each combination
           - Note price tier patterns for recurring combinations

        2. Design Element Clusters
           - Document groups of design elements that consistently appear together
           - Minimum 3 examples required for each cluster

        3. Material & Construction Patterns
           - Focus on knit techniques and materials that appear repeatedly
           - Must be visible in product images
           - Include price point analysis for common combinations

        Format your response in markdown with these sections:
        1. Top Style Combinations (minimum 3 occurrences)
        2. Premium Style Patterns (verified high-price combinations)
        3. Trending Design Combinations (with clear visual evidence)

        For each pattern include:
        - Detailed description of combined attributes
        - Number of occurrences in data
        - Price range
        - the relevant images with the formatting "![Product Name](image_url)"
        - Brief explanation of why this represents a true pattern

        Product Data:
        {json.dumps(data, indent=2)}
        """

        response = self.client.chat.completions.create(
            model="o1-preview",
            messages=[{"role": "user", "content": prompt}]
        )
        
        return response.choices[0].message.content

    def generate_report(self, analysis: str, output_file: str = None):
        """Generate a formatted markdown report with the pattern analysis."""
        if output_file is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = f"shopbop_style_patterns_{timestamp}.md"
        
        header = f"""# Shopbop Knitwear Style Pattern Analysis
*Generated: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}*

---

"""

        table_of_contents = """
## Table of Contents
- [Top Style Combinations](#top-style-combinations)
- [Premium Style Patterns](#premium-style-patterns)
- [Trending Design Combinations](#trending-design-combinations)

---

"""

        footer = """
*Generated by Shopbop Pattern Analyzer AI*
*Last Updated: {}*
""".format(datetime.now().strftime("%Y-%m-%d"))

        # Create output directory if it doesn't exist
        output_dir = Path(output_file).parent
        output_dir.mkdir(parents=True, exist_ok=True)

        with open(output_file, 'w') as f:
            f.write(header)
            f.write(table_of_contents)
            f.write(analysis)
            f.write(footer)
            
        return output_file

def main():
    load_dotenv()
    
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        raise ValueError("Please set the OPENAI_API_KEY environment variable")
    
    analyzer = ShopbopPatternAnalyzer(api_key)
    
    try:
        data = analyzer.load_json_data('shopbop_analysis.json')
        analysis = analyzer.analyze_patterns(data)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"shopbop_style_patterns_{timestamp}.md"
        output_file = analyzer.generate_report(analysis, output_file)
        print(f"Analysis complete! Style pattern report generated: {output_file}")
        
    except Exception as e:
        print(f"Error during analysis: {str(e)}")

if __name__ == "__main__":
    main() 